import sys

class MergeSort:
	def __init__(self, argvs):
		self.data = [0 for i in range(len(argvs) - 1)]
		for i in range(1, len(argvs)):
			self.data[i - 1] = int(argvs[i])

	def Sort(self):	
		self.ans = [0 for i in range(len(self.data))]
		self.InternalSort(self.data, 0, len(self.data)- 1, self.ans )
		for i in range(len(self.data)):
			print(str(self.data[i]) + ',')
		

	def InternalSort(self,arr, head, end, storage):
		if(head < end):
			mid = int((head + end)/2)
			self.InternalSort(arr, head, mid, storage)
			self.InternalSort(arr, mid + 1, end, storage)
			self.InternalMerge(arr, head, mid, end, storage)

	def InternalMerge(self, data, left, mid, right, storage):
		i = left
		j = mid + 1
		head = left
		for head in range(left, right + 1):
			if(i > mid):
				storage[head] = data[j]
				j += 1
			elif(j > right):
				storage[head] = data[i]
				i += 1
			elif(data[i] < data[j]):
				storage[head] = data[i]
				i += 1
			else:
				storage[head] = data[j]
				j += 1

		for k in range(left, right + 1):
			data[k] = storage[k]


a = MergeSort(sys.argv)
a.Sort()