#关键在于gethash
#解除conflict使用插排列表

class MyHashMap:
    
    storageLength = 1000
    
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.storage = [[] for i in range(self.storageLength)]

    def put(self, key: int, value: int) -> None:
        """
        value will always be non-negative.
        """
        hashValue = self.getHash(key)
        chosenList = self.storage[hashValue % self.storageLength]
        self.insert(key, value, chosenList)
        
    def get(self, key: int) -> int:
        """
        Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key
        """
        hashValue = self.getHash(key)
        chosenList = self.storage[hashValue % self.storageLength]
        found = self.searchIndex(key, chosenList)
        if found >= 0:
            return chosenList[found][1]
        else:
            return -1

    def remove(self, key: int) -> None:
        """
        Removes the mapping of the specified value key if this map contains a mapping for the key
        """
        hashValue = self.getHash(key)
        chosenList = self.storage[hashValue % self.storageLength]
        found = self.searchIndex(key, chosenList)
        if found >= 0:
            del chosenList[found]
    
    def getHash(self, key: int) -> int:
        ret = 0
        stringKey = str(key)
        for i in range(len(stringKey)):
            ret = ret << 4 ^ ret >>28 ^ int(stringKey[i])
        return ret
    
    def insert(self, key: int, value: int, array: list) -> None:
        found = False
        for i in range(len(array)):
            if array[i][0] == key:
                array[i] = key,value
                found = True
                break
            elif array[i][0] > key:
                array.insert(i, (key, value))
                found = True
                break
        if found == False:
            array.append((key, value))
    
    def searchIndex(self, key: int, chosenList:list) -> int:
        i = 0
        j = len(chosenList) - 1
        while i <= j:
            mid = int((i + j)/2)
            if chosenList[mid][0] == key:
                return mid
            elif chosenList[mid][0] > key:
                j = mid - 1
            else:
                i = mid + 1

        return -1

            
# Your MyHashMap object will be instantiated and called as such:
# obj = MyHashMap()
# obj.put(key,value)
# param_2 = obj.get(key)
# obj.remove(key)