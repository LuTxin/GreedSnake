#208. Implement Trie (Prefix Tree)
#Use key or index to represent the alphabet
#node doesn't contains any information. The mapping represent the alpha.
#e.g. If use list as container to map to next alphabet, 'c' = list[2], 'e' = list[4] 'z' = list[25] 'end' = list[26]. If the element is none, means the map doesn't exist and vice versa.

class Trie:
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.rootNode = TrieNode()

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        currentNode = self.rootNode
        for i in range(len(word)):
            if word[i] not in currentNode.nextNodes:
                newNode = TrieNode()
                currentNode.nextNodes[word[i]] = newNode
            currentNode = currentNode.nextNodes[word[i]]
            
        #add end
        if 'end' not in currentNode.nextNodes:
            newNode = TrieNode()
            currentNode.nextNodes['end'] = newNode
            

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        currentNode = self.rootNode
        for i in range(len(word)):
            if word[i] not in currentNode.nextNodes:
                return False
            currentNode = currentNode.nextNodes[word[i]]
        
        if 'end' not in currentNode.nextNodes:
            return False
        
        return True
    
    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        currentNode = self.rootNode
        for i in range(len(prefix)):
            if prefix[i] not in currentNode.nextNodes:
                return False
            currentNode = currentNode.nextNodes[prefix[i]]
        
        return True
        
class TrieNode:
    def __init__(self):
        self.nextNodes = dict()

# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)